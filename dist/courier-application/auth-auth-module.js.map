{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: ''\r\n    },\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'register',\r\n        component: RegisterComponent\r\n    },\r\n];\r\n\r\nexport const AuthRoutingModule = RouterModule.forChild(routes)\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material/material.module';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    AuthRoutingModule,\n    SharedModule\n  ],\n  exports: [\n    LoginComponent,\n    RegisterComponent,\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { emailValidator, rePassCheckFn, genderValidator, imageValidator } from '../validators';\nimport { StorageService } from 'src/app/core/services/storage.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  f: FormGroup\n\n  isLoading= false\n  hide = true\n  hideRepeat = true\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private storage: StorageService,\n    private fb: FormBuilder\n  ) {\n    const passwordCheck = this.fb.control('', [Validators.required, Validators.minLength(4)])\n    this.f = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4)]],\n      email: ['', [Validators.required, emailValidator]],\n      password: passwordCheck,\n      rePassword: ['', [Validators.required, Validators.minLength(4), rePassCheckFn(passwordCheck)]],\n      gender: ['', [Validators.required, genderValidator]],\n      image: ['', [Validators.required, imageValidator]]\n    })\n  }\n\n  ngOnInit(): void {\n  }\n\n  registerHandler(formData) {\n    this.isLoading = true\n    this.authService.register(formData).subscribe({\n      next: (data) => {\n        this.isLoading = false\n        this.storage.setItem('auth', data)\n        this.router.navigateByUrl('/')\n      },\n      error: (err) => {\n        this.isLoading = false\n        window.alert(err.message)\n      }\n    })\n  }\n\n}\n","<app-loader *ngIf=\"isLoading\" showLoader=\"isLoading\"></app-loader>\n<div class=\"card\" fxLayout=\"column center\" fxFlex.xs=\"70%\">\n    <mat-card fxFlex  fxLayout=\"column\" class=\"mat-elevation-z22\">\n        <mat-card-content fxFlexAlign=\"center\">\n            <form [formGroup]=\"f\" (ngSubmit)=\"registerHandler(f.value)\">\n                <div class=\"register-label\">\n                    <mat-label class=\"register-label\">REGISTER</mat-label>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter username</mat-label>\n                        <input name=\"username\" placeholder=\"Gosho\" type=\"text\" formControlName=\"username\" matInput>\n                        <mat-hint *ngIf=\"f.get('username').touched && f.get('username').errors?.required\">Username is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('username').touched && f.get('username').errors?.minlength\">Username must be at least 4 characters!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter Email</mat-label>\n                        <input name=\"email\" placeholder=\"example@example.com\" type=\"text\" formControlName=\"email\" matInput>\n                        <mat-hint *ngIf=\"f.get('email').touched && f.get('email').errors?.required\">Email is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('email').touched && f.get('email').errors?.emailValidator\">Email is incorrect!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter Image Url</mat-label>\n                        <input name=\"image\" placeholder=\"http://example@example.com/image.jpg\" type=\"text\" formControlName=\"image\" matInput>\n                        <mat-hint *ngIf=\"f.get('image').touched && f.get('image').errors?.required\">Image is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('image').touched && f.get('image').errors?.imageValidator\">Image URL is incorrect!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter password</mat-label>\n                        <input matInput [type]=\"hide ? 'password' : 'text'\" name=\"password\" placeholder=\"******\" formControlName=\"password\">\n                        <button mat-icon-button matSuffix (click)=\"hide = !hide\" type=\"button\">\n                            <mat-icon>{{!hide ? 'visibility' : 'visibility_off'}}</mat-icon>\n                        </button>\n                        <mat-hint *ngIf=\"f.get('password').touched && f.get('password').errors?.required\">Password is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('password').touched && f.get('password').errors?.minlength\">Password must be at least 4 characters!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Repeat password</mat-label>\n                        <input matInput [type]=\"hideRepeat ? 'password' : 'text'\" name=\"rePassword\" placeholder=\"******\" formControlName=\"rePassword\">\n                        <button mat-icon-button matSuffix (click)=\"hideRepeat = !hideRepeat\" type=\"button\">\n                            <mat-icon>{{!hideRepeat ? 'visibility' : 'visibility_off'}}</mat-icon>\n                        </button>\n                        <mat-hint *ngIf=\"f.get('rePassword').touched && f.get('rePassword').errors?.required\">Repeat password is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('rePassword').touched && f.get('rePassword').errors?.rePassCheck\">Repeat Password must be the same as password!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-label>Gender: </mat-label>\n                    <br>\n                    <mat-radio-group fxLayoutGap=\"20px\" formControlName=\"gender\" name=\"gender\">\n                        <mat-radio-button value=\"male\">Male</mat-radio-button>\n                        <mat-radio-button value=\"female\">Female</mat-radio-button>\n                    </mat-radio-group>\n\n                </div>\n                <br>\n                <div>\n                    <span> You have an accont? <a routerLink=\"/auth/login\">Click here!</a> </span>\n                </div>\n                <br>\n                <div class=\"btn-submit\">\n                    <button mat-raised-button type=\"submit\">Sign in</button>\n                </div>\n            </form>\n        </mat-card-content>\n\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { Router } from '@angular/router';\nimport { StorageService } from 'src/app/core/services/storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  f: FormGroup\n  hide = true\n  isLoading = false\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private storage: StorageService,\n    private fb: FormBuilder\n  ) {\n    this.f = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(4)]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n    })\n  }\n\n  ngOnInit(): void {}\n\n  loginHandler(formData): void {\n    this.isLoading = true\n    this.authService.login(formData).subscribe({\n      next: (data) => {\n        this.isLoading = false\n        this.storage.setItem('auth', data)\n        this.router.navigateByUrl('/')\n      },\n      error: (err) => {\n        window.alert(err.error)\n        this.isLoading = false\n      }\n    })\n\n  }\n\n\n}\n","<app-loader *ngIf=\"isLoading\" showLoader=\"isLoading\"></app-loader>\n<div class=\"card\" fxLayout=\"column center\" fxFlex.xs=\"70%\">\n    <mat-card fxFlex fxLayout=\"column\" class=\"mat-elevation-z22\">\n        <mat-card-content fxFlexAlign=\"center\">\n            <form [formGroup]=\"f\" (ngSubmit)=\"loginHandler(f.value)\">\n                <div class=\"login-label\">\n                    <mat-label class=\"login-label\">LOGIN</mat-label>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter your username</mat-label>\n                        <input name=\"username\" placeholder=\"Gosho\" type=\"text\" formControlName=\"username\" matInput>\n                        <mat-hint *ngIf=\"f.get('username').touched && f.get('username').errors?.required\">Username is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('username').touched && f.get('username').errors?.minlength\">Username must be at least 4 characters!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <div>\n                    <mat-form-field apperance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input matInput [type]=\"hide ? 'password' : 'text'\" name=\"password\" id=\"password\" placeholder=\"******\" formControlName=\"password\">\n                        <button mat-icon-button matSuffix (click)=\"hide = !hide\" type=\"button\">\n                            <mat-icon>{{!hide ? 'visibility' : 'visibility_off'}}</mat-icon>\n                        </button>\n                        <mat-hint *ngIf=\"f.get('password').touched && f.get('password').errors?.required\">Password is required!</mat-hint>\n                        <mat-hint *ngIf=\"f.get('password').touched && f.get('password').errors?.minlength\">Password must be at least 4 characters!</mat-hint>\n                    </mat-form-field>\n                </div>\n                <br>\n                <div>\n                    <span> Don't have account? <a routerLink=\"/auth/register\">Click here!</a> </span>\n                </div>\n                <br>\n                <div class=\"btn-submit\">\n                    <button mat-raised-button type=\"submit\" [disabled]=\"f.invalid\">Sign in</button>\n                </div>\n            </form>\n        </mat-card-content>\n\n    </mat-card>\n</div>"],"sourceRoot":"webpack:///"}